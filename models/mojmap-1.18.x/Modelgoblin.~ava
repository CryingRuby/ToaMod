// Made with Blockbench 4.6.5
// Exported for Minecraft version 1.17 or later with Mojang mappings
// Paste this class into your mod and generate all required imports

public class Modelgoblin<T extends Entity> extends EntityModel<T> {
	// This layer location should be baked with EntityRendererProvider.Context in
	// the entity renderer and passed into this model's constructor
	public static final ModelLayerLocation LAYER_LOCATION = new ModelLayerLocation(
			new ResourceLocation("modid", "goblin"), "main");
	private final ModelPart Torsohead;
	private final ModelPart RightArm;
	private final ModelPart LeftArm;
	private final ModelPart RightLeg;
	private final ModelPart LeftLeg;
	private final ModelPart Tail;

	public Modelgoblin(ModelPart root) {
		this.Torsohead = root.getChild("Torsohead");
		this.RightArm = root.getChild("RightArm");
		this.LeftArm = root.getChild("LeftArm");
		this.RightLeg = root.getChild("RightLeg");
		this.LeftLeg = root.getChild("LeftLeg");
		this.Tail = root.getChild("Tail");
	}

	public static LayerDefinition createBodyLayer() {
		MeshDefinition meshdefinition = new MeshDefinition();
		PartDefinition partdefinition = meshdefinition.getRoot();

		PartDefinition Torsohead = partdefinition.addOrReplaceChild("Torsohead", CubeListBuilder.create(),
				PartPose.offset(14.0F, 17.0F, 0.0F));

		PartDefinition cube_r1 = Torsohead.addOrReplaceChild("cube_r1",
				CubeListBuilder.create().texOffs(0, 21).addBox(-18.4F, -14.2F, -2.4F, 6.0F, 6.0F, 3.0F,
						new CubeDeformation(0.0F)),
				PartPose.offsetAndRotation(1.0F, 5.0F, -0.9F, -0.1309F, 0.0F, 0.0F));

		PartDefinition cube_r2 = Torsohead.addOrReplaceChild("cube_r2",
				CubeListBuilder.create().texOffs(0, 0).addBox(-8.0F, -17.0F, 4.0F, 9.0F, 6.0F, 5.0F,
						new CubeDeformation(0.0F)),
				PartPose.offsetAndRotation(-11.0F, 5.0F, 0.0F, 0.5672F, 0.0F, 0.0F));

		PartDefinition Head = Torsohead.addOrReplaceChild("Head", CubeListBuilder.create().texOffs(0, 11)
				.addBox(-2.0851F, -1.0F, -15.1649F, 4.0F, 2.0F, 6.0F, new CubeDeformation(0.25F)),
				PartPose.offset(-14.6F, -14.1167F, 6.0649F));

		PartDefinition cube_r3 = Head.addOrReplaceChild("cube_r3",
				CubeListBuilder.create().texOffs(14, 13).addBox(-5.6F, -19.0F, -5.0F, 4.0F, 2.0F, 6.0F,
						new CubeDeformation(0.0F)),
				PartPose.offsetAndRotation(3.6F, 19.1167F, -6.0649F, 0.2182F, 0.0F, 0.0F));

		PartDefinition Ears = Head.addOrReplaceChild("Ears", CubeListBuilder.create(),
				PartPose.offset(-19.6554F, -3.9281F, -0.4837F));

		PartDefinition cube_r4 = Ears.addOrReplaceChild("cube_r4",
				CubeListBuilder.create().texOffs(0, 12).addBox(14.0F, 0.9F, 1.0F, 3.0F, 1.0F, 0.0F,
						new CubeDeformation(0.0F)),
				PartPose.offsetAndRotation(0.0F, 1.0F, -11.1625F, 0.6109F, 0.0F, 0.0436F));

		PartDefinition cube_r5 = Ears.addOrReplaceChild("cube_r5",
				CubeListBuilder.create().texOffs(0, 2).addBox(14.75F, -6.0F, 6.0F, 2.0F, 2.0F, 0.0F,
						new CubeDeformation(0.0F)),
				PartPose.offsetAndRotation(0.0F, 1.0F, -11.1625F, 0.6109F, 0.0F, 0.5672F));

		PartDefinition Ears2 = Head.addOrReplaceChild("Ears2", CubeListBuilder.create(),
				PartPose.offset(19.6554F, -3.9281F, -0.4837F));

		PartDefinition cube_r6 = Ears2.addOrReplaceChild("cube_r6",
				CubeListBuilder.create().texOffs(0, 11).addBox(-17.0F, 0.9F, 1.0F, 3.0F, 1.0F, 0.0F,
						new CubeDeformation(0.0F)),
				PartPose.offsetAndRotation(0.0F, 1.0F, -11.1625F, 0.6109F, 0.0F, -0.0436F));

		PartDefinition cube_r7 = Ears2.addOrReplaceChild("cube_r7",
				CubeListBuilder.create().texOffs(0, 0).addBox(-16.75F, -6.0F, 6.0F, 2.0F, 2.0F, 0.0F,
						new CubeDeformation(0.0F)),
				PartPose.offsetAndRotation(0.0F, 1.0F, -11.1625F, 0.6109F, 0.0F, -0.5672F));

		PartDefinition RightArm = partdefinition.addOrReplaceChild("RightArm", CubeListBuilder.create(),
				PartPose.offset(-7.0467F, 5.5757F, -2.5695F));

		PartDefinition cube_r8 = RightArm.addOrReplaceChild("cube_r8",
				CubeListBuilder.create().texOffs(38, 6).addBox(-11.7F, -10.8F, -4.9F, 2.0F, 8.0F, 2.0F,
						new CubeDeformation(0.0F)),
				PartPose.offsetAndRotation(10.0467F, 18.4243F, -0.3305F, -0.3491F, 0.0F, 0.0F));

		PartDefinition cube_r9 = RightArm.addOrReplaceChild("cube_r9",
				CubeListBuilder.create().texOffs(10, 39).addBox(-15.0F, -15.0F, -1.0F, 2.0F, 8.0F, 2.0F,
						new CubeDeformation(0.0F)),
				PartPose.offsetAndRotation(10.0467F, 18.4243F, -0.3305F, 0.0F, 0.0F, 0.3491F));

		PartDefinition LeftArm = partdefinition.addOrReplaceChild("LeftArm", CubeListBuilder.create(),
				PartPose.offsetAndRotation(5.0F, 6.0F, -3.1F, 0.0F, 0.0F, 0.0F));

		PartDefinition cube_r10 = LeftArm.addOrReplaceChild("cube_r10",
				CubeListBuilder.create().texOffs(25, 37).addBox(9.7F, -9.8603F, -4.558F, 2.0F, 8.0F, 2.0F,
						new CubeDeformation(0.0F)),
				PartPose.offsetAndRotation(-9.0F, 17.0F, 0.2F, -0.3491F, 0.0F, 0.0F));

		PartDefinition cube_r11 = LeftArm.addOrReplaceChild("cube_r11",
				CubeListBuilder.create().texOffs(33, 37).addBox(12.658F, -14.0603F, -1.0F, 2.0F, 8.0F, 2.0F,
						new CubeDeformation(0.0F)),
				PartPose.offsetAndRotation(-9.0F, 17.0F, 0.2F, 0.0F, 0.0F, -0.3491F));

		PartDefinition RightLeg = partdefinition.addOrReplaceChild("RightLeg", CubeListBuilder.create(),
				PartPose.offsetAndRotation(-3.7F, 13.1F, -0.4F, 0.0F, 0.0F, 0.0F));

		PartDefinition bone4 = RightLeg.addOrReplaceChild("bone4", CubeListBuilder.create(),
				PartPose.offset(18.0F, 8.0F, 0.8F));

		PartDefinition cube_r12 = bone4.addOrReplaceChild("cube_r12",
				CubeListBuilder.create().texOffs(0, 30).addBox(-17.0F, -3.0F, -12.0F, 3.0F, 7.0F, 3.0F,
						new CubeDeformation(0.0F)),
				PartPose.offsetAndRotation(0.0F, 0.0F, 0.0F, -0.6981F, 0.3927F, 0.0F));

		PartDefinition bone3 = RightLeg.addOrReplaceChild("bone3", CubeListBuilder.create(),
				PartPose.offset(4.0F, 11.0F, 0.8F));

		PartDefinition cube_r13 = bone3
				.addOrReplaceChild("cube_r13",
						CubeListBuilder.create().texOffs(42, 21).addBox(-5.0F, -2.0F, 6.0F, 2.0F, 6.0F, 2.0F,
								new CubeDeformation(0.0F)),
						PartPose.offsetAndRotation(0.0F, 0.0F, 0.0F, 1.7017F, 0.0F, 0.0F));

		PartDefinition bone7 = RightLeg.addOrReplaceChild("bone7", CubeListBuilder.create(),
				PartPose.offset(18.0F, 7.0F, 0.0F));

		PartDefinition cube_r14 = bone7.addOrReplaceChild("cube_r14",
				CubeListBuilder.create().texOffs(41, 31).addBox(-19.0F, -2.2F, -5.2F, 2.0F, 7.0F, 2.0F,
						new CubeDeformation(0.0F)),
				PartPose.offsetAndRotation(0.0F, 1.0F, 0.8F, -0.5672F, 0.2618F, 0.0F));

		PartDefinition bone9 = RightLeg.addOrReplaceChild("bone9", CubeListBuilder.create(),
				PartPose.offset(18.0F, 7.0F, 0.0F));

		PartDefinition cube_r15 = bone9
				.addOrReplaceChild("cube_r15",
						CubeListBuilder.create().texOffs(32, 0).addBox(-19.7F, 0.9F, -8.8F, 3.0F, 2.0F, 4.0F,
								new CubeDeformation(0.0F)),
						PartPose.offsetAndRotation(0.0F, 1.0F, 0.8F, 0.0F, 0.2618F, 0.0F));

		PartDefinition LeftLeg = partdefinition.addOrReplaceChild("LeftLeg", CubeListBuilder.create(),
				PartPose.offset(3.9F, 13.1F, 0.0F));

		PartDefinition bone5 = LeftLeg.addOrReplaceChild("bone5", CubeListBuilder.create(),
				PartPose.offset(-19.0F, 7.0F, -0.4F));

		PartDefinition cube_r16 = bone5
				.addOrReplaceChild("cube_r16",
						CubeListBuilder.create().texOffs(41, 40).addBox(3.0F, -2.0F, 6.0F, 2.0F, 6.0F, 2.0F,
								new CubeDeformation(0.0F)),
						PartPose.offsetAndRotation(14.0F, 4.0F, 0.8F, 1.7017F, 0.0F, 0.0F));

		PartDefinition bone6 = LeftLeg.addOrReplaceChild("bone6", CubeListBuilder.create(),
				PartPose.offset(-19.0F, 7.0F, -0.4F));

		PartDefinition cube_r17 = bone6.addOrReplaceChild("cube_r17",
				CubeListBuilder.create().texOffs(15, 29).addBox(14.0F, -3.0F, -12.0F, 3.0F, 7.0F, 3.0F,
						new CubeDeformation(0.0F)),
				PartPose.offsetAndRotation(0.0F, 1.0F, 0.8F, -0.6981F, -0.3927F, 0.0F));

		PartDefinition bone8 = LeftLeg.addOrReplaceChild("bone8", CubeListBuilder.create(),
				PartPose.offset(-19.0F, 7.0F, -0.4F));

		PartDefinition cube_r18 = bone8.addOrReplaceChild("cube_r18",
				CubeListBuilder.create().texOffs(0, 40).addBox(17.0F, -2.2F, -5.2F, 2.0F, 7.0F, 2.0F,
						new CubeDeformation(0.0F)),
				PartPose.offsetAndRotation(0.0F, 1.0F, 0.8F, -0.5672F, -0.2618F, 0.0F));

		PartDefinition bone10 = LeftLeg.addOrReplaceChild("bone10", CubeListBuilder.create(),
				PartPose.offset(-19.0F, 7.0F, -0.4F));

		PartDefinition cube_r19 = bone10
				.addOrReplaceChild("cube_r19",
						CubeListBuilder.create().texOffs(27, 31).addBox(16.7F, 0.9F, -8.8F, 3.0F, 2.0F, 4.0F,
								new CubeDeformation(0.0F)),
						PartPose.offsetAndRotation(0.0F, 1.0F, 0.8F, 0.0F, -0.2618F, 0.0F));

		PartDefinition Tail = partdefinition.addOrReplaceChild("Tail", CubeListBuilder.create(),
				PartPose.offset(0.0F, 13.0F, 0.0F));

		PartDefinition cube_r20 = Tail.addOrReplaceChild("cube_r20",
				CubeListBuilder.create().texOffs(28, 23).addBox(-1.3F, -12.0F, -4.4F, 2.0F, 2.0F, 6.0F,
						new CubeDeformation(0.4F)),
				PartPose.offsetAndRotation(0.0F, 12.0F, 0.0F, -0.4363F, 0.0F, 0.0F));

		PartDefinition bone = Tail.addOrReplaceChild("bone", CubeListBuilder.create(),
				PartPose.offset(0.0F, 11.0F, 0.0F));

		PartDefinition cube_r21 = bone
				.addOrReplaceChild("cube_r21",
						CubeListBuilder.create().texOffs(28, 15).addBox(-1.3F, -12.0F, 1.6F, 2.0F, 2.0F, 6.0F,
								new CubeDeformation(0.1F)),
						PartPose.offsetAndRotation(0.0F, 1.0F, 0.0F, -0.4363F, 0.0F, 0.0F));

		PartDefinition bone1 = bone.addOrReplaceChild("bone1", CubeListBuilder.create(),
				PartPose.offset(0.0F, 0.0F, 0.0F));

		PartDefinition cube_r22 = bone1.addOrReplaceChild("cube_r22",
				CubeListBuilder.create().texOffs(22, 5).addBox(-1.3F, -12.0F, 6.6F, 2.0F, 2.0F, 6.0F,
						new CubeDeformation(-0.3F)),
				PartPose.offsetAndRotation(0.0F, 1.0F, 0.0F, -0.4363F, 0.0F, 0.0F));

		PartDefinition bone2 = bone1.addOrReplaceChild("bone2", CubeListBuilder.create(),
				PartPose.offset(0.0F, 0.0F, 0.0F));

		PartDefinition cube_r23 = bone2.addOrReplaceChild("cube_r23",
				CubeListBuilder.create().texOffs(18, 21).addBox(-1.3F, -12.0F, 11.6F, 2.0F, 2.0F, 6.0F,
						new CubeDeformation(-0.5F)),
				PartPose.offsetAndRotation(0.0F, 1.0F, 0.0F, -0.4363F, 0.0F, 0.0F));

		return LayerDefinition.create(meshdefinition, 64, 64);
	}

	@Override
	public void renderToBuffer(PoseStack poseStack, VertexConsumer vertexConsumer, int packedLight, int packedOverlay,
			float red, float green, float blue, float alpha) {
		Torsohead.render(poseStack, vertexConsumer, packedLight, packedOverlay, red, green, blue, alpha);
		RightArm.render(poseStack, vertexConsumer, packedLight, packedOverlay, red, green, blue, alpha);
		LeftArm.render(poseStack, vertexConsumer, packedLight, packedOverlay, red, green, blue, alpha);
		RightLeg.render(poseStack, vertexConsumer, packedLight, packedOverlay, red, green, blue, alpha);
		LeftLeg.render(poseStack, vertexConsumer, packedLight, packedOverlay, red, green, blue, alpha);
		Tail.render(poseStack, vertexConsumer, packedLight, packedOverlay, red, green, blue, alpha);
	}

	public void setupAnim(T entity, float limbSwing, float limbSwingAmount, float ageInTicks, float netHeadYaw,
			float headPitch) {
		this.RightArm.xRot = Mth.cos(limbSwing * 0.6662F + (float) Math.PI) * limbSwingAmount;
		this.LeftLeg.xRot = Mth.cos(limbSwing * 1.0F) * -1.0F * limbSwingAmount;
		this.LeftArm.xRot = Mth.cos(limbSwing * 0.6662F) * limbSwingAmount;
		this.RightLeg.xRot = Mth.cos(limbSwing * 1.0F) * 1.0F * limbSwingAmount;
		this.Tail.yRot = Mth.cos(limbSwing * 1.0F) * 1.0F * limbSwingAmount;
	}
}